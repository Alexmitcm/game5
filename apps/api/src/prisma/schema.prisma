generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Preference {
  accountAddress  String   @id
  appIcon         Int?     @default(0)
  includeLowScore Boolean  @default(false)
  createdAt       DateTime @default(now())
}

model PremiumProfile {
  id            String    @id @default(cuid())
  walletAddress String    @unique
  profileId     String    @unique
  isActive      Boolean   @default(true)
  linkedAt      DateTime  @default(now())
  deactivatedAt DateTime?
  user          User      @relation(fields: [walletAddress], references: [walletAddress])

  @@index([walletAddress])
  @@index([profileId])
}

model User {
  walletAddress      String             @id
  email              String?            @unique
  username           String?            @unique
  displayName        String?
  avatarUrl          String?
  bio                String?
  location           String?
  website            String?
  twitterHandle      String?
  registrationDate   DateTime           @default(now())
  referrerAddress    String?
  registrationTxHash String?
  premiumUpgradedAt  DateTime?
  lastActiveAt       DateTime           @default(now())
  totalLogins        Int                @default(0)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  status             UserStatus         @default(Standard)
  premiumProfile     PremiumProfile?
  userCoins          UserCoin[]
  userNotifications  UserNotification[]
  preferences        UserPreferences?
  userQuests         UserQuest[]
  userRewards        UserReward[]
  userStats          UserStats?

  @@index([walletAddress])
  @@index([email])
  @@index([username])
  @@index([status])
  @@index([registrationDate])
}

model UserPreferences {
  walletAddress      String       @id
  emailNotifications Boolean      @default(true)
  pushNotifications  Boolean      @default(true)
  marketingEmails    Boolean      @default(false)
  privacyLevel       PrivacyLevel @default(Public)
  language           String       @default("en")
  timezone           String       @default("UTC")
  autoLinkProfile    Boolean      @default(true)
  showPremiumBadge   Boolean      @default(true)
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  user               User         @relation(fields: [walletAddress], references: [walletAddress], onDelete: Cascade)
}

model UserStats {
  walletAddress    String   @id
  totalPosts       Int      @default(0)
  totalComments    Int      @default(0)
  totalLikes       Int      @default(0)
  totalFollowers   Int      @default(0)
  totalFollowing   Int      @default(0)
  daysAsPremium    Int      @default(0)
  referralCount    Int      @default(0)
  totalEarnings    Decimal  @default(0) @db.Decimal(20, 8)
  questsCompleted  Int      @default(0)
  questsInProgress Int      @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [walletAddress], references: [walletAddress], onDelete: Cascade)
}

model UserReward {
  id             String           @id @default(cuid())
  walletAddress  String
  type           RewardType
  amount         Decimal          @db.Decimal(20, 8)
  currency       String           @default("USDT")
  status         RewardStatus     @default(Pending)
  sourceType     RewardSourceType
  sourceId       String?
  sourceMetadata Json?
  txHash         String?
  claimedAt      DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  user           User             @relation(fields: [walletAddress], references: [walletAddress], onDelete: Cascade)

  @@index([walletAddress])
  @@index([type])
  @@index([status])
  @@index([createdAt])
}

model UserQuest {
  id              String      @id @default(cuid())
  walletAddress   String
  questId         String
  title           String
  description     String
  type            QuestType
  status          QuestStatus @default(Active)
  currentProgress Int         @default(0)
  targetProgress  Int
  rewardAmount    Decimal?    @db.Decimal(20, 8)
  rewardCurrency  String      @default("USDT")
  completedAt     DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  user            User        @relation(fields: [walletAddress], references: [walletAddress], onDelete: Cascade)

  @@index([walletAddress])
  @@index([questId])
  @@index([status])
  @@index([createdAt])
}

model UserCoin {
  id             String         @id @default(cuid())
  walletAddress  String
  coinType       CoinType
  amount         Int            @default(0)
  earnedAt       DateTime       @default(now())
  sourceType     CoinSourceType
  sourceId       String?
  sourceMetadata Json?
  createdAt      DateTime       @default(now())
  user           User           @relation(fields: [walletAddress], references: [walletAddress], onDelete: Cascade)

  @@index([walletAddress])
  @@index([coinType])
  @@index([earnedAt])
}

model UserNotification {
  id             String               @id @default(cuid())
  walletAddress  String
  type           NotificationType
  title          String
  message        String
  priority       NotificationPriority @default(Normal)
  isRead         Boolean              @default(false)
  readAt         DateTime?
  actionUrl      String?
  actionMetadata Json?
  createdAt      DateTime             @default(now())
  user           User                 @relation(fields: [walletAddress], references: [walletAddress], onDelete: Cascade)

  @@index([walletAddress])
  @@index([type])
  @@index([isRead])
  @@index([createdAt])
}

enum UserStatus {
  Standard
  Premium
}

enum PrivacyLevel {
  Public
  Private
  FriendsOnly
}

enum RewardType {
  Referral
  Quest
  Activity
  Bonus
  Welcome
}

enum RewardStatus {
  Pending
  Claimed
  Failed
  Expired
}

enum RewardSourceType {
  Registration
  Referral
  Quest
  Activity
  Admin
}

enum QuestType {
  Welcome
  Referral
  Activity
  Social
  Premium
}

enum QuestStatus {
  Active
  Completed
  Expired
  Failed
}

enum CoinType {
  Experience
  Achievement
  Social
  Premium
}

enum CoinSourceType {
  Registration
  Referral
  Quest
  Activity
  Social
}

enum NotificationType {
  Welcome
  Premium
  Quest
  Reward
  Referral
  System
  Marketing
}

enum NotificationPriority {
  Low
  Normal
  High
  Urgent
}
